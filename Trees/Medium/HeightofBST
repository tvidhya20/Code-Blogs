<h1>FINDING THE HEIGHT OF A BINARY SEARCH TREE</h1>

A Binary Search Tree (BST) is a type of binary tree where each node has at most two children, referred to as the left child and the right child. The key property of a BST is that the value of each node in the left subtree is less than the value of the node itself, and the value of each node in the right subtree is greater than the value of the node itself. The BST is commonly used in computer science and is a fundamental data structure for organizing and retrieving data in a sorted manner.

## INTRODUCTION TO HEIGHT OF BST

The height of a Binary Search Tree (BST) refers to the maximum number of edges in the longest path from the root node to a leaf node. It represents the depth or level of the tree. The height of a BST is an important factor as it affects the efficiency of various operations performed on the tree, such as search, insertion, and deletion.

A balanced BST, where the heights of the left and right subtrees do not differ by more than 1, ensures optimal performance for these operations. By maintaining a balanced BST, the height is minimized, resulting in faster and more efficient operations.

The height of an empty BST is considered to be -1, while a BST with only one node has a height of 0. As more nodes are added to the tree, the height increases. The worst-case scenario for the height of a BST is when the tree is completely unbalanced, resulting in a height of n-1, where n is the number of nodes in the tree.
